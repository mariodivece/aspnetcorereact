'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CommentBox = function (_React$Component) {
    _inherits(CommentBox, _React$Component);

    function CommentBox(props) {
        _classCallCheck(this, CommentBox);

        var _this = _possibleConstructorReturn(this, (CommentBox.__proto__ || Object.getPrototypeOf(CommentBox)).call(this, props));

        _this.loadCommentsFromServer = function () {
            var xhr = new XMLHttpRequest();
            xhr.open('get', _this.props.url, true);
            xhr.onload = function () {
                var data = JSON.parse(xhr.responseText);
                this.setState({ data: data });
            }.bind(_this);
            xhr.send();
        };

        _this.handleCommentSubmit = function (comment) {
            var comments = _this.state.data;
            // Optimistically set an id on the new comment. It will be replaced by an
            // id generated by the server. In a production application you would likely
            // not use Date.now() for this and would have a more robust system in place.
            comment.id = Date.now();
            var newComments = comments.concat([comment]);
            _this.setState({ data: newComments });

            var data = new FormData();
            data.append('author', comment.author);
            data.append('text', comment.text);

            var xhr = new XMLHttpRequest();
            xhr.open('post', _this.props.submitUrl, true);
            xhr.onload = function () {
                this.loadCommentsFromServer();
            }.bind(_this);
            xhr.send(data);
        };

        _this.state = {
            data: props.initialData
        };
        return _this;
    }

    _createClass(CommentBox, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.setInterval(this.loadCommentsFromServer, this.props.pollInterval);
        }
    }, {
        key: 'render',
        value: function render() {
            return React.createElement(
                'div',
                { className: 'commentBox' },
                React.createElement(
                    'h1',
                    null,
                    'Comments'
                ),
                React.createElement(CommentList, { data: this.state.data }),
                React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
            );
        }
    }]);

    return CommentBox;
}(React.Component);